
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
sys.stdout.reconfigure(encoding="utf-8")

"""
Excel(MOVIE_ID) ‚Üí TMDB ‚Üí Blogger ÏûêÎèôÌè¨Ïä§ÌåÖ ÌååÏù¥ÌîÑÎùºÏù∏ (Î∏åÎùºÏßà Ìè¨Î•¥Ìà¨Í∞àÏñ¥ Î≤ÑÏ†Ñ)
- Google SheetsÏóêÏÑú ÎåÄÏÉÅ ÏòÅÌôî ID ÏùΩÍ∏∞
- TMDB ÏÉÅÏÑ∏/Ï∂úÏó∞/Ïù¥ÎØ∏ÏßÄ/Ï∂îÏ≤ú/ÏòàÍ≥†Ìé∏ ÏàòÏßë
- Ïù∏Ìä∏Î°ú(7Î¨∏Ïû•) + ÏÑπÏÖò Î¶¨Îìú + Î≥∏Î¨∏ ÏÑπÏÖò + ÏïÑÏõÉÌä∏Î°ú(7Î¨∏Ïû•)
- Blogger API Î∞úÌñâ ÌõÑ ÏãúÌä∏Ïóê "ÏôÑ" ÌëúÏãú
"""
import feedparser

import json, os, html, textwrap, requests, random, time, re
import xml.etree.ElementTree as ET
from googleapiclient.discovery import build
import gspread
from google.oauth2.service_account import Credentials
import google.oauth2.credentials

# ================================
# Google Sheets Ïù∏Ï¶ù
# ================================
def get_sheet():
    SERVICE_ACCOUNT_FILE = "sheetapi.json"
    SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    gc = gspread.authorize(creds)
    SHEET_ID = "10kqYhxmeewG_9-XOdXTbv0RVQG9_-jXjtg0C6ERoGG0"
    return gc.open_by_key(SHEET_ID).sheet1

# ===============================
# üìù Ìè¨Ïä§ÌåÖ ÏÑ§Ï†ï
POST_COUNT = 1
POST_DELAY_MIN = 1

# ===============================
# üîß ÌôòÍ≤Ω/Í≤ΩÎ°ú ÏÑ§Ï†ï
BLOG_ID = "1140596789331555981"
RELATED_RSS_URL = f"https://www.blogger.com/feeds/{BLOG_ID}/posts/default?alt=rss"

# ===============================
# üà∂ TMDB ÏÑ§Ï†ï
LANG = "pt-BR"
CAST_COUNT = 10
STILLS_COUNT = 8
TMDB_V3_BASE = "https://api.themoviedb.org/3"
IMG_BASE = "https://image.tmdb.org/t/p"

# üîë TMDB API Key (V3)
API_KEY = "56f4a3bce0512cdc20171a83153c25d6"

# üîë YouTube API
YOUTUBE_API_KEY = "AIzaSyB1-WDPuD1sQX-NDAb2E6QdsTQn-DHFq7Y"
YOUTUBE_SEARCH_URL = "https://www.googleapis.com/youtube/v3/search"

# ===============================
# Blogger Ïù∏Ï¶ù
# ===============================
BLOGGER_TOKEN_JSON = "blogger_token.json"
SCOPES = ["https://www.googleapis.com/auth/blogger"]
def get_related_posts(rss_url, max_results=5):
    feed = feedparser.parse(rss_url)
    posts = []
    for entry in feed.entries[:max_results]:
        posts.append({"title": entry.title, "link": entry.link})
    return posts


def get_blogger_service():
    with open(BLOGGER_TOKEN_JSON, "r", encoding="utf-8") as f:
        token_data = json.load(f)
    creds = google.oauth2.credentials.Credentials.from_authorized_user_info(token_data, SCOPES)
    return build("blogger", "v3", credentials=creds)

# ===============================
# TMDB / Í≥µÌÜµ Ïú†Ìã∏
# ===============================
def tmdb_get(path, params=None, api_key=None):
    url = f"{TMDB_V3_BASE}{path}"
    headers = {"Accept": "application/json"}
    if params is None:
        params = {}
    if api_key and "api_key" not in params:
        params["api_key"] = api_key

    try:
        r = requests.get(url, headers=headers, params=params, timeout=20)
        r.raise_for_status()
        return r.json()
    except requests.exceptions.HTTPError as e:
        status = e.response.status_code if e.response else "?"
        print(f"‚ùå TMDB ÏöîÏ≤≠ Ïã§Ìå® (HTTP {status}): {url}")
        return {}
    except Exception as e:
        print(f"‚ùå TMDB ÏöîÏ≤≠ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        return {}



def img_url(path, size="w780"):
    return f"{IMG_BASE}/{size}{path}" if path else None

def choose(*options):
    return random.choice(options)

def post_to_blogger(service, blog_id, title, html_content, labels=None, is_draft=False):
    body = {"kind": "blogger#post", "title": title, "content": html_content}
    if labels:
        body["labels"] = labels
    post = service.posts().insert(blogId=blog_id, body=body, isDraft=is_draft).execute()
    return post


# ===============================
# üé¨ Ïù∏Ìä∏Î°ú (7Î¨∏Ïû•)
# ===============================
def make_intro_6(title, year, genres_str, director_names, main_cast, cert_label, runtime_min, keywords):
    year_txt = f"lan√ßado em {year}" if year else "ano de lan√ßamento desconhecido"
    genre_phrase = genres_str if genres_str else "g√™nero desconhecido"
    director_one = director_names[0] if director_names else ""
    star_one = main_cast[0] if main_cast else ""
    star_two = main_cast[1] if len(main_cast) > 1 else ""
    runtime_txt = f"{runtime_min} minutos" if runtime_min else "dura√ß√£o desconhecida"
    cert_txt = cert_label or "classifica√ß√£o desconhecida"

    # 1. Abertura
    s1 = choose(
        f"Ol√°, cin√©filos! Hoje vamos mergulhar no universo do filme <b>{title}</b>, {year_txt}, uma obra que merece toda a sua aten√ß√£o.",
        f"Se voc√™ √© apaixonado por cinema, vai gostar de conhecer mais sobre <b>{title}</b>, {year_txt}, um t√≠tulo que j√° conquistou muitos cora√ß√µes.",
        f"Bem-vindo! Hoje o destaque √© para <b>{title}</b>, {year_txt}, um longa que desperta emo√ß√µes intensas e discuss√µes interessantes.",
        f"O cinema nos brinda com v√°rias obras inesquec√≠veis, e <b>{title}</b>, {year_txt}, √© certamente uma delas que vamos explorar juntos."
    )

    # 2. G√™nero
    s2 = choose(
        f"Este √© um filme de {genre_phrase}, que combina emo√ß√£o e profundidade de maneira envolvente.",
        f"Pertencente ao g√™nero {genre_phrase}, a produ√ß√£o consegue transmitir sentimentos fortes e momentos inesquec√≠veis.",
        f"Com caracter√≠sticas marcantes de {genre_phrase}, o longa prende a aten√ß√£o do in√≠cio ao fim.",
        f"Envolvendo-se no g√™nero {genre_phrase}, a trama se desenrola de forma cativante e instigante."
    )

    # 3. Dire√ß√£o
    s3 = (
        choose(
            f"A dire√ß√£o √© assinada por {director_one}, que imprime um estilo √∫nico e deixa sua marca em cada cena.",
            f"Com {director_one} no comando, a obra se transforma em uma experi√™ncia visual e narrativa inesquec√≠vel.",
            f"{director_one} conduz a hist√≥ria com sensibilidade e firmeza, criando momentos de grande impacto.",
            f"O olhar criativo de {director_one} faz deste filme algo muito especial e memor√°vel."
        ) if director_one else choose(
            "A dire√ß√£o √© equilibrada, com escolhas criativas que mant√™m o p√∫blico imerso.",
            "Mesmo sem grandes exageros, a condu√ß√£o da trama √© precisa e muito bem realizada.",
            "A narrativa se beneficia de uma dire√ß√£o clara e consistente, que d√° fluidez ao enredo.",
            "A maneira como a hist√≥ria √© conduzida garante ritmo e emo√ß√£o do come√ßo ao fim."
        )
    )

    # 4. Elenco
    s4 = (
        choose(
            f"O elenco brilha com nomes como {star_one}{' e ' + star_two if star_two else ''}, entregando atua√ß√µes memor√°veis.",
            f"Entre os destaques do elenco est√° {star_one}, cuja performance √© digna de aplausos.",
            f"As atua√ß√µes s√£o s√≥lidas e cheias de emo√ß√£o, com {star_one} marcando presen√ßa em momentos-chave.",
            f"Al√©m de um elenco diversificado, {star_one} se destaca pela entrega em seu papel."
        ) if star_one else choose(
            "O elenco √© diversificado e cheio de talentos que enriquecem a narrativa.",
            "Cada integrante do elenco contribui com sua presen√ßa marcante.",
            "Os atores entregam interpreta√ß√µes que refor√ßam a intensidade da hist√≥ria.",
            "O conjunto de atores d√° vida a personagens cativantes e bem constru√≠dos."
        )
    )

    # 5. Dura√ß√£o e classifica√ß√£o
    s5 = choose(
        f"O filme tem dura√ß√£o de {runtime_txt}, o que torna a experi√™ncia equilibrada e envolvente.",
        f"Com seus {runtime_txt}, a narrativa consegue manter o ritmo sem se tornar cansativa.",
        f"A dura√ß√£o de {runtime_txt} √© ideal para aproveitar cada detalhe da hist√≥ria."
    ) + " " + choose(
        f"A classifica√ß√£o indicativa √© {cert_txt}, tornando-o acess√≠vel para diferentes p√∫blicos.",
        f"Classificado como {cert_txt}, o longa pode ser apreciado por v√°rias faixas et√°rias.",
        f"A censura √© {cert_txt}, o que ajuda o espectador a decidir a melhor ocasi√£o para assistir."
    )

    # 6. Impacto
    s6 = choose(
        f"<b>{title}</b> despertou debates e gerou expectativas desde seu lan√ßamento, mostrando sua for√ßa cultural.",
        f"Desde sua estreia, <b>{title}</b> chamou a aten√ß√£o por sua proposta ousada e qualidade t√©cnica.",
        f"O impacto de <b>{title}</b> foi imediato, consolidando-o como um dos grandes destaques do {year_txt}.",
        f"N√£o √© apenas um filme, <b>{title}</b> √© uma experi√™ncia que permanece viva na mem√≥ria de quem assiste."
    )

    # 7. Encerramento da introdu√ß√£o
    s7 = choose(
        f"Agora, vamos explorar juntos os principais destaques de <b>{title}</b> e entender por que ele merece um lugar especial na sua lista de filmes.",
        f"Nas pr√≥ximas linhas, voc√™ vai conhecer mais sobre a sinopse, o elenco, os bastidores e os pontos fortes de <b>{title}</b>.",
        f"Prepare-se para mergulhar no universo de <b>{title}</b>, analisando detalhes que o tornam uma produ√ß√£o t√£o relevante.",
        f"Vamos seguir adiante e descobrir o que faz de <b>{title}</b> uma obra t√£o comentada e aclamada."
    )

    return " ".join([s1, s2, s3, s4, s5, s6, s7])

# ===============================
# üé¨ ÏïÑÏõÉÌä∏Î°ú (7Î¨∏Ïû•)
# ===============================
def make_outro_6(title, year, genres_str, director_names, keywords):
    year_txt = year if year else "desconhecido"
    director_one = director_names[0] if director_names else ""

    s1 = choose(
        f"Chegamos ao fim desta an√°lise sobre o filme <b>{title}</b> ({year_txt}), que trouxe tantos pontos interessantes para refletirmos.",
        f"Encerramos aqui a apresenta√ß√£o de <b>{title}</b> ({year_txt}), uma obra que certamente merece estar no radar de qualquer amante do cinema.",
        f"Terminamos esta jornada pelo universo de <b>{title}</b> ({year_txt}), destacando os aspectos que o tornam uma produ√ß√£o t√£o comentada.",
        f"Este foi um mergulho no mundo de <b>{title}</b> ({year_txt}), explorando os elementos que fazem deste filme algo memor√°vel."
    )

    s2 = choose(
        "Ao longo do artigo, revisitamos a sinopse, comentamos sobre o elenco e detalhamos os principais aspectos t√©cnicos e art√≠sticos.",
        "Nesta an√°lise, percorremos a hist√≥ria, falamos dos atores e apontamos os pontos altos que tornam o filme envolvente.",
        "Passamos pela trama, pela dire√ß√£o e pelo impacto cultural que este t√≠tulo trouxe para os espectadores.",
        "Relembramos a narrativa, a ambienta√ß√£o e os personagens que fazem de <b>{title}</b> uma experi√™ncia especial."
    )

    s3 = (
        choose(
            f"A condu√ß√£o de {director_one} foi um dos pontos mais fortes, mostrando criatividade e sensibilidade em cada cena.",
            f"{director_one} conseguiu imprimir sua marca pessoal no filme, equilibrando emo√ß√£o e t√©cnica de maneira √∫nica.",
            f"O olhar art√≠stico de {director_one} deixou claro como a dire√ß√£o pode transformar uma hist√≥ria em algo grandioso.",
            f"N√£o podemos deixar de destacar a vis√£o de {director_one}, que fez deste trabalho uma obra marcante."
        ) if director_one else choose(
            "A dire√ß√£o em geral mostrou equil√≠brio e clareza, garantindo ritmo e impacto narrativo at√© o fim.",
            "Mesmo sem um nome amplamente conhecido na dire√ß√£o, a condu√ß√£o foi s√≥lida e bem estruturada.",
            "A forma como o enredo foi dirigido manteve o p√∫blico conectado e interessado at√© os √∫ltimos momentos.",
            "A dire√ß√£o mostrou maturidade e dom√≠nio t√©cnico, elevando a qualidade da obra."
        )
    )

    s4 = choose(
        "As avalia√ß√µes e notas s√£o apenas guias, mas a verdadeira experi√™ncia vem de assistir e sentir cada cena por conta pr√≥pria.",
        "Os n√∫meros e cr√≠ticas importam, mas nada substitui a emo√ß√£o pessoal de se conectar com a narrativa.",
        "Vale lembrar que opini√µes variam, e o melhor √© sempre tirar suas pr√≥prias conclus√µes ao assistir.",
        "A nota √© apenas uma refer√™ncia: o impacto real depende do olhar de cada espectador."
    )

    s5 = choose(
        "Ao final, tamb√©m deixamos recomenda√ß√µes de filmes relacionados que podem enriquecer ainda mais sua jornada cinematogr√°fica.",
        "Para quem gostou desta experi√™ncia, indicamos t√≠tulos semelhantes que ampliam o repert√≥rio e trazem novas descobertas.",
        "Sugerimos ainda obras que dialogam com este filme, permitindo compara√ß√µes interessantes e novas perspectivas.",
        "Para continuar no clima, oferecemos algumas op√ß√µes de filmes que seguem a mesma linha tem√°tica."
    )

    kw = ", ".join([k for k in (keywords or []) if k][:6]) if keywords else ""
    s6 = choose(
        f"Entre os principais pontos, destacamos palavras-chave como {kw}, que ajudam a compreender melhor o alcance da obra.",
        f"As palavras-chave {kw} sintetizam os elementos centrais do filme e podem servir de guia para novas buscas.",
        f"Destacamos termos como {kw}, que refor√ßam a import√¢ncia desta produ√ß√£o dentro de seu g√™nero.",
        f"Os conceitos de {kw} foram recorrentes e mostram como o filme se posiciona dentro do cen√°rio cinematogr√°fico."
    ) if kw else "Esperamos que as informa√ß√µes acima sirvam como um bom guia para sua pr√≥xima sess√£o de cinema."

    s7 = choose(
        "Muito obrigado por ter acompanhado at√© aqui, espero que este conte√∫do tenha inspirado sua pr√≥xima sess√£o de cinema. üôÇ",
        "Agradecemos por sua leitura e desejamos que aproveite ainda mais suas experi√™ncias cinematogr√°ficas, at√© a pr√≥xima!",
        "Se gostou do artigo, compartilhe com amigos e continue acompanhando nossas pr√≥ximas an√°lises de grandes filmes.",
        "Foi um prazer trazer esta an√°lise para voc√™, e em breve voltaremos com novos t√≠tulos e recomenda√ß√µes especiais."
    )

    return " ".join([s1, s2, s3, s4, s5, s6, s7])

# ===============================
# Î¶¨Îìú Î¨∏Íµ¨ (ÏÑπÏÖò ÏïàÎÇ¥, ÌôïÏû•Ìåê)
# ===============================
def make_section_lead(name, title, year, genres_str, cert_label, extras=None):
    extras = extras or {}
    year_txt = f"{year}" if year else ""
    genre_phrase = genres_str if genres_str else "g√™nero"
    cert_txt = cert_label or "classifica√ß√£o desconhecida"
    who = ", ".join((extras.get("cast_top") or [])[:3]) if extras else ""
    runtime_min = extras.get("runtime_min") if extras else None
    runtime_txt = f"{runtime_min} minutos" if runtime_min else ""

    if name == "Sinopse":
        base = [
            choose(
                f"A seguir, apresentamos a sinopse de <b>{title}</b>{' ('+year_txt+')' if year_txt else ''}, cuidadosamente preparada sem spoilers, para que voc√™ possa sentir o clima geral da obra antes de assistir.",
                f"Para quem vai assistir, aqui vai uma vis√£o geral de <b>{title}</b>{' ('+year_txt+')' if year_txt else ''}, destacando os pontos principais da trama e preparando sua expectativa de forma equilibrada.",
                f"Resumimos a hist√≥ria de <b>{title}</b> de maneira clara e envolvente, evitando revelar reviravoltas importantes, mas transmitindo o tom emocional do filme.",
                f"Nesta se√ß√£o voc√™ encontrar√° uma introdu√ß√£o objetiva sobre <b>{title}</b>, ajudando a entender a proposta da obra e seu posicionamento dentro do g√™nero {genre_phrase}.",
                f"A sinopse de <b>{title}</b> serve como um convite para mergulhar no enredo, oferecendo apenas o suficiente para despertar curiosidade sem comprometer a surpresa."
            ),
            choose(
                f"O tom acompanha o melhor do {genre_phrase}, ora mais contido, ora mais intenso, mas sempre envolvente, criando uma experi√™ncia que mant√©m a aten√ß√£o do p√∫blico.",
                "A narrativa busca equil√≠brio entre emo√ß√£o e ritmo, mantendo o espectador conectado ao longo de toda a proje√ß√£o e criando momentos memor√°veis.",
                "A linguagem visual e a trilha sonora desempenham papel importante, refor√ßando o clima da hist√≥ria e ajudando a transmitir a ess√™ncia do filme.",
                "A atmosfera do filme foi constru√≠da com cuidado, utilizando o melhor do g√™nero para envolver o p√∫blico em cada cena e di√°logo.",
                "Combinando dire√ß√£o de arte, di√°logos e trilha, a narrativa mostra consist√™ncia que mant√©m o p√∫blico imerso at√© o final."
            ),
            choose(
                f"A classifica√ß√£o et√°ria √© {cert_txt}, o que auxilia o espectador a decidir o momento adequado para assistir sem preocupa√ß√µes.",
                "Sem indica√ß√£o restritiva, o filme pode ser apreciado por diferentes p√∫blicos, tornando-se uma experi√™ncia inclusiva.",
                "Vale ressaltar que a classifica√ß√£o √© apenas um guia; a experi√™ncia completa deve ser vivida pessoalmente.",
                "Independentemente da classifica√ß√£o, a obra convida o espectador a refletir e sentir cada detalhe da hist√≥ria.",
                "A classifica√ß√£o indica a faixa recomendada, mas a verdadeira intensidade do filme s√≥ pode ser avaliada ao assistir."
            ),
            choose(
                "Confira abaixo um resumo detalhado antes de seguir para os pontos centrais da an√°lise.",
                "Vamos ao panorama geral da hist√≥ria, que vai preparar o terreno para as pr√≥ximas se√ß√µes.",
                "Com essa vis√£o inicial, voc√™ ter√° base suficiente para compreender melhor os destaques apresentados a seguir.",
                "Este resumo funciona como um guia introdut√≥rio, antes de explorarmos aspectos t√©cnicos e art√≠sticos mais profundos.",
                "Agora, acompanhe esta introdu√ß√£o curta e direta, que antecede uma an√°lise mais completa do filme."
            )
        ]

    elif name == "Elenco":
        base = [
            choose(
                f"O elenco √© de respeito{f', com {who}' if who else ''}, reunindo talentos capazes de dar vida e profundidade aos personagens principais e secund√°rios.",
                "A combina√ß√£o de atores escolhidos funciona de forma harmoniosa, sustentando a for√ßa narrativa e transmitindo autenticidade em cada cena.",
                "As performances se destacam pela naturalidade e pelo comprometimento, tornando cada personagem memor√°vel e essencial √† trama.",
                "Este √© um elenco diversificado que adiciona camadas √† narrativa, trazendo diferentes estilos de interpreta√ß√£o que enriquecem a experi√™ncia.",
                "Al√©m de nomes conhecidos, novos talentos aparecem em destaque, refor√ßando a qualidade e a originalidade do filme."
            ),
            choose(
                "A seguir, listamos os principais nomes e seus pap√©is, destacando como cada ator contribui para a constru√ß√£o da hist√≥ria.",
                "Veja abaixo os destaques do elenco e as personagens correspondentes, para que voc√™ conhe√ßa melhor os rostos por tr√°s da trama.",
                "Os nomes apresentados a seguir ajudam a compor a for√ßa dram√°tica da produ√ß√£o, cada um desempenhando um papel marcante.",
                "Ao explorar o elenco, √© poss√≠vel perceber como as diferentes atua√ß√µes se complementam e elevam o impacto da obra.",
                "Conhecer os principais atores ajuda a compreender melhor o tom do filme e o tipo de performance que o espectador pode esperar."
            )
        ]

    elif name == "Fotos":
        base = [
            choose(
                "As imagens a seguir ajudam a sentir a atmosfera do filme antes mesmo de apertar o play, oferecendo um vislumbre da est√©tica e da fotografia escolhida.",
                "As fotos revelam escolhas de fotografia e dire√ß√£o de arte que valem aten√ß√£o, destacando cores, cen√°rios e enquadramentos marcantes.",
                "Cada imagem transporta o espectador para dentro da narrativa, funcionando quase como uma janela para o universo do filme.",
                "Essas fotos s√£o capazes de transmitir emo√ß√£o por si s√≥, refor√ßando a intensidade de determinadas cenas sem a necessidade de palavras.",
                "A sele√ß√£o de stills mostra a qualidade art√≠stica da obra e serve como complemento √† sinopse e ao elenco apresentados anteriormente."
            ),
            choose(
                "Observe atentamente a composi√ß√£o, o jogo de luz e sombra e como todos os elementos refor√ßam o tom da hist√≥ria de forma coerente.",
                "Cada still captura um instante que diz muito sobre o universo do filme, ajudando o espectador a imaginar a experi√™ncia completa.",
                "A ilumina√ß√£o, a dire√ß√£o de arte e os detalhes de cen√°rio se destacam em cada imagem, mostrando o cuidado est√©tico da produ√ß√£o.",
                "As fotos tamb√©m permitem notar detalhes que podem passar despercebidos durante a exibi√ß√£o, enriquecendo ainda mais a an√°lise.",
                "Esse conjunto de imagens ajuda a entender a atmosfera criada e complementa a narrativa visual proposta pelo diretor."
            )
        ]

    else:
        base = [""]

    return " ".join(base)



# ===============================
# TMDB Î≥¥Ï°∞ Ìï®ÏàòÎì§
# ===============================
def get_movie_release_cert(movie_id):
    try:
        data = tmdb_get(f"/movie/{movie_id}/release_dates", api_key=API_KEY)
        for r in data.get("results", []):
            if r.get("iso_3166_1") == "BR" and r.get("release_dates"):
                return r["release_dates"][0].get("certification") or None
    except:
        return None
    return None

def get_movie_videos_all(movie_id):
    try:
        data = tmdb_get(f"/movie/{movie_id}/videos", api_key=API_KEY)
        return data.get("results", [])
    except:
        return []

def get_youtube_trailers(title, year=None, max_results=2):
    if not YOUTUBE_API_KEY:
        return []
    q = f"{title} trailer"
    if year: q += f" {year}"
    params = {"part":"snippet","q":q,"type":"video","key":YOUTUBE_API_KEY,"maxResults":max_results}
    try:
        r = requests.get(YOUTUBE_SEARCH_URL, params=params, timeout=20)
        r.raise_for_status()
        items = r.json().get("items", [])
        vids = []
        for it in items:
            vid = it["id"]["videoId"]
            title = it["snippet"]["title"]
            vids.append((title, f"https://www.youtube.com/watch?v={vid}"))
        return vids
    except:
        return []

def get_movie_recommendations(movie_id, lang="pt-BR", api_key=None):
    """Ï∂îÏ≤ú ÏòÅÌôî Î™©Î°ù (ÏóêÎü¨ Î∞úÏÉù Ïãú Îπà Î¶¨Ïä§Ìä∏ Î∞òÌôò)"""
    try:
        params = {"language": lang}
        j = tmdb_get(
            f"/movie/{movie_id}/recommendations",
            params=params,
            api_key=api_key
        )
        return j.get("results", [])
    except Exception as e:
        print(f"‚ùå TMDB Ï∂îÏ≤ú ÏòÅÌôî API Ïò§Î•ò (movie_id={movie_id}): {e}")
        return []




def make_hashtags_from_title(title, year=None, genres=None):
    tags = []
    if year:
        tags.append(f"#{year}")
    if genres:
        tags.extend([f"#{g.strip()}" for g in genres.split(",") if g.strip()][:3])
    if title:
        tags.append(f"#{title.replace(' ', '')}")
    return " ".join(tags)


# ===============================
# HTML ÎπåÎçî
# ===============================
# ===============================
# HTML ÎπåÎçî (Ìè¨Î•¥Ìà¨Í∞àÏñ¥, ÏùºÎ≥∏Î∏îÎ°úÍ∑∏ Ïä§ÌÉÄÏùº Î∞òÏòÅ)
# ===============================
def build_html(post, cast_count=10, stills_count=8):
    esc = html.escape

    # ====== Í∏∞Î≥∏ Î©îÌÉÄ ======
    title = esc(post.get("title") or post.get("original_title") or "T√≠tulo indispon√≠vel")
    release_date = esc(post.get("release_date") or "")
    year = release_date[:4] if release_date else ""
    runtime = int(post.get("runtime") or 0)
    genres_list = [g.get("name","") for g in (post.get("genres") or []) if g.get("name")]
    genres_str = " ¬∑ ".join(genres_list)
    tagline = esc(post.get("tagline") or "")
    adult_flag = bool(post.get("adult", False))

    countries = [c.get("name","") for c in (post.get("production_countries") or []) if c.get("name")]
    country_str = ", ".join(countries) if countries else "Pa√≠s de produ√ß√£o n√£o informado"

    backdrop = img_url(post.get("backdrop_path"), "w1280")

    credits = post.get("credits") or {}
    cast = (credits.get("cast") or [])[:cast_count]
    crew = credits.get("crew") or []
    directors = [c for c in crew if c.get("job") == "Director"]
    director_names = [esc(d.get("name","")) for d in directors]
    cast_names = [esc(p.get("name","")) for p in cast]

    backdrops = (post.get("images") or {}).get("backdrops") or []
    backdrops = sorted(backdrops, key=lambda b: (b.get("vote_count",0), b.get("vote_average",0)), reverse=True)[:stills_count]

    cert = get_movie_release_cert(post["id"])
    if not cert and adult_flag:
        cert = "18+"

    # ====== ÌÇ§ÏõåÎìú(Ïù∏Ìä∏Î°ú/ÏïÑÏõÉÌä∏Î°úÏö©) ======
    base_keywords = []
    for w in (title.replace(":", " ").replace("-", " ").split()):
        if len(w) > 1:
            base_keywords.append(str(w))
    base_keywords += genres_list
    base_keywords += director_names[:2]
    base_keywords += cast_names[:3]
    if year: base_keywords.append(year)
    if cert: base_keywords.append(cert)
    base_keywords += ["resenha", "avalia√ß√£o", "elenco", "trailer", "fotos", "filmes recomendados"]

    seen = set(); keywords = []
    for k in base_keywords:
        if isinstance(k, str) and k and k not in seen:
            keywords.append(k); seen.add(k)

    # ====== Ïù∏Ìä∏Î°ú ======
    intro_6 = make_intro_6(title, year, genres_str, director_names, cast_names, cert, runtime, keywords)

    # ====== Ï∂úÏó∞Ïûê ÌÖåÏù¥Î∏î(Ïù¥ÎØ∏ÏßÄ Ìè¨Ìï®) ======
    cast_rows = []
    for p in cast:
        name = esc(p.get("name",""))
        ch = esc(p.get("character",""))
        prof = img_url(p.get("profile_path"), "w185")
        img_tag = f'<img src="{prof}" alt="{name}" style="width:72px;height:auto;border-radius:8px;">' if prof else ""
        cast_rows.append(
            f'<tr>'
            f'<td style="vertical-align:top;padding:8px 10px;white-space:nowrap;">{img_tag}</td>'
            f'<td style="vertical-align:top;padding:8px 10px;"><b>{name}</b><br><span style="color:#666;">{ch}</span></td>'
            f'</tr>'
        )
    cast_table = (
        '<table style="width:100%;border-collapse:collapse;border:1px solid #eee;">' +
        "".join(cast_rows or ['<tr><td style="padding:10px;">Informa√ß√µes de elenco indispon√≠veis.</td></tr>']) +
        '</table>'
    )

    # ====== Ïä§Ìã∏Ïª∑ 2Ïó¥ Í∞§Îü¨Î¶¨ ======
    still_divs = []
    for b in backdrops:
        p = img_url(b.get("file_path"), "w780")
        if not p: continue
        still_divs.append(
            f'<div style="flex:0 0 49%;margin:0.5%;">'
            f'<img src="{p}" alt="still de {title}" style="width:100%;height:auto;border-radius:10px;"></div>'
        )
    stills_html = (
        '<div style="display:flex;flex-wrap:wrap;justify-content:space-between;">' +
        "".join(still_divs or ['<div style="padding:10px;">Sem fotos dispon√≠veis.</div>']) +
        '</div>'
    )

    # ====== Ï†êÏàò/Ïù∏Í∏∞ Î∞ïÏä§ ======
    vote_avg = float(post.get("vote_average") or 0.0)
    vote_count = int(post.get("vote_count") or 0)
    popularity = float(post.get("popularity") or 0.0)

    rating_html = f"""
    <div style="background:linear-gradient(135deg,#f9f9f9,#ececec);
                border:2px solid #ddd;border-radius:15px;
                padding:30px;margin:20px 0;
                box-shadow:0 4px 12px rgba(0,0,0,0.08);
                text-align:center;">
      <div style="font-size:20px;font-weight:bold;margin-bottom:12px;color:#333;">
        ‚≠ê Avalia√ß√£o & üìä Popularidade
      </div>
      <div style="font-size:18px;color:#222;margin:8px 0;">
        <b style="color:#ff9800;">Nota m√©dia:</b> {vote_avg:.1f}/10
      </div>
      <div style="font-size:16px;color:#555;margin:6px 0;">
        Votos: {vote_count:,}
      </div>
      <div style="font-size:18px;color:#0066cc;margin-top:10px;">
        <b>Popularidade:</b> {popularity:.1f}
      </div>
    </div>
    """

    # ====== ÏòàÍ≥†Ìé∏(iframe) + ÏïàÎÇ¥Î¨∏ ======
    video_notice_variants = [
        "‚Äª V√≠deos s√£o obtidos automaticamente; ocasionalmente pode aparecer um conte√∫do n√£o-oficial.",
        "‚Äª Em raros casos, pode carregar um v√≠deo relacionado que n√£o √© o trailer oficial.",
        "‚Äª Se o carregamento falhar, um v√≠deo alternativo pode ser exibido.",
        "‚Äª Dependendo da disponibilidade p√∫blica, o conte√∫do pode mudar sem aviso.",
        "‚Äª Caso n√£o reproduza, tente novamente mais tarde."
    ]
    video_html = ""
    video_lead = ""  # ÎèôÏùº Íµ¨Ï°∞ Ïú†ÏßÄÏö©(ÏùºÎ≥∏ ÌÖúÌîåÎ¶øÏ≤òÎüº ÏúÑÏπòÎßå ÌôïÎ≥¥)
    videos = get_movie_videos_all(post["id"])
    if videos:
        video_html += f"<p>{video_lead}</p>"
        for v in videos:
            yt_key = v.get("key")
            yt_name = esc(v.get("name") or "Trailer")
            if yt_key:
                video_html += (
                    f"<p><b>{yt_name}</b></p>"
                    f"<iframe width='560' height='315' src='https://www.youtube.com/embed/{yt_key}' "
                    f"frameborder='0' allowfullscreen></iframe><br>"
                )
    else:
        # Fallback: YouTube API Í≤ÄÏÉâÏùÄ Ïô∏Î∂Ä Ìï®Ïàò(get_youtube_trailers)Í∞Ä ÏûàÏùÑ ÏàòÎèÑ/ÏóÜÏùÑ ÏàòÎèÑ ÏûàÏúºÎãà Î∞©Ïñ¥
        try:
            alts = get_youtube_trailers(f"{title} trailer", max_results=2)
        except Exception:
            alts = []
        if alts:
            video_html += f"<br /><p style='color:#666;font-size:13px;'>{random.choice(video_notice_variants)}</p><br />"
            for vid, vtitle in alts:
                video_html += (
                    f"<p><b>{esc(vtitle)}</b></p>"
                    f"<iframe width='560' height='315' src='https://www.youtube.com/embed/{vid}' "
                    f"frameborder='0' allowfullscreen></iframe><br>"
                )
        else:
            video_html += "<p>Trailer n√£o dispon√≠vel.</p>"

    # ====== Ï∂îÏ≤úÏòÅÌôî(Ìè¨Ïä§ÌÑ∞+Ï†úÎ™©, 3Ïó¥) ======
    recs = get_movie_recommendations(post["id"], lang=LANG)
    if recs:
        rec_cards = []
        for r in recs[:6]:
            rtitle = esc(r.get("title") or r.get("original_title") or "")
            poster = img_url(r.get("poster_path"), "w185")
            tmdb_link = f"https://www.themoviedb.org/movie/{r.get('id')}?language=pt-BR"
            rec_cards.append(
                f'<div style="flex:0 0 32%;margin-bottom:15px;text-align:center;">'
                f'<a href="{tmdb_link}" target="_blank">'
                f'<img src="{poster}" alt="{rtitle}" style="width:100%;border-radius:8px;"></a><br>'
                f'<a href="{tmdb_link}" target="_blank" style="font-size:14px;color:#333;text-decoration:none;">{rtitle}</a>'
                f'</div>'
            )
        recs_html = (
            f'<h2>Filmes recomendados de ‚Äú{title}‚Äù</h2>'
            f'<p>{make_section_lead("Fotos", title, year, genres_str, cert)}</p>'  # ÏûêÎ¶¨ ÎßûÏ∂§Ïö©(Íµ¨Ï°∞ ÎèôÏùº Ïú†ÏßÄ)
            '<div style="display:flex;flex-wrap:wrap;justify-content:space-between;">'
            + "".join(rec_cards) +
            "</div>"
        )
    else:
        recs_html = "<p>N√£o h√° recomenda√ß√µes dispon√≠veis.</p>"

    # ====== RSS Í¥ÄÎ†®Í∏Ä Î∞ïÏä§ (ÏùºÎ≥∏ ÌÖúÌîåÎ¶øÍ≥º ÎèôÏùºÌïú Î∞ïÏä§ Ïä§ÌÉÄÏùº) ======
    def build_related_block(rss_url, count=5):
        links = []
        try:
            r = requests.get(rss_url, timeout=10)
            r.raise_for_status()
            root = ET.fromstring(r.content)
            items = root.findall(".//item")
            for item in items[:count]:
                link = item.findtext("link") or ""
                t = item.findtext("title") or "Sem t√≠tulo"
                if link:
                    links.append((link, t))
        except Exception as e:
            print("‚ùå RSS parse error:", e)

        links_html = ""
        for href, text_ in links:
            links_html += f'<a href="{href}" style="color:#555555; font-weight:normal;">‚óè {esc(text_)}</a><br>\n'

        return f"""
<div style="background: rgb(239, 237, 233); border-radius: 8px;
            border: 2px dashed rgb(167, 162, 151);
            box-shadow: rgb(239, 237, 233) 0px 0px 0px 10px;
            color: #565656; font-weight: bold;
            margin: 2em 10px; padding: 2em;">
  <p style="border-bottom: 1px solid rgb(85, 85, 85); color: #555555;
            font-size: 16px; margin-bottom: 15px; padding-bottom: 5px;">
    ‚ô°‚ô• Leia tamb√©m
  </p>
  {links_html}
</div>
"""
    related_block = build_related_block(RELATED_RSS_URL, count=5)

    # ====== ÏïÑÏõÉÌä∏Î°ú ======
    outro_6 = make_outro_6(title, year, genres_str, director_names, keywords)

    # ====== Ìï¥ÏãúÌÉúÍ∑∏ (ÏùºÎ≥∏ ÌÖúÌîåÎ¶ø ÎèôÏùº ÏúÑÏπòÏóê Ï∂úÎ†•) ======
    blog_title1 = f"Filme {title} ({year}) sinopse elenco trailer"
    hashtags = make_hashtags_from_title(blog_title1)

    # ====== Î≥∏Î¨∏(ÏùºÎ≥∏ ÌÖúÌîåÎ¶øÍ≥º ÎèôÏùºÌïú Íµ¨Ï°∞/Ïó¨Î∞±) ======
    overview = esc(post.get("overview") or "Sinopse ainda n√£o dispon√≠vel.")
    html_out = f"""
<p>{intro_6}</p>
<!--more--><br />
{f"<p><img src='{backdrop}' style='width:100%;height:auto;border-radius:12px;'></p>" if backdrop else ""}
{f"<p><i>{tagline}</i></p>" if tagline else ""}

<br /><br /><br />
<h2>Sinopse do filme ‚Äú{title}‚Äù</h2>
<p><b>Pa√≠s(es):</b> {country_str} | <b>G√™nero(s):</b> {genres_str if genres_str else "‚Äî"}</p>
<p>{make_section_lead("Sinopse", title, year, genres_str, cert)}</p>

<div style="background:#fafafa;border:2px solid #ddd;border-radius:12px;
            padding:10px 18px 25px;margin:18px 0;line-height:1.7;color:#333;
            box-shadow:0 3px 8px rgba(0,0,0,0.05);">
  <p style="font-weight:bold;font-size:16px;margin-bottom:10px;">üé¨ {title} ‚Äî Sinopse</p>
  {overview}
</div>
<br />
{hashtags}

<br /><br /><br />
<h2>Elenco do filme ‚Äú{title}‚Äù</h2>
<p>{make_section_lead("Elenco", title, year, genres_str, cert, extras={{"cast_top": cast_names}})}</p>
{cast_table}
<br />
{hashtags}

<br /><br /><br />
<h2>Fotos (stills) de ‚Äú{title}‚Äù</h2>
<p>{make_section_lead("Fotos", title, year, genres_str, cert)}</p>
{stills_html}
<br />
{hashtags}

<br /><br /><br />
<h2>Avalia√ß√£o & Trailer</h2>
<p>{make_section_lead("Avalia√ß√£o & Popularidade", title, year, genres_str, cert)}</p>
{rating_html}
{video_html}

<br /><br /><br />
{recs_html}

<br />
<p>{outro_6}</p>
{related_block}

<p style="font-size:12px;color:#666;">
Este conte√∫do foi produzido com dados do <a href="https://www.themoviedb.org/" target="_blank" style="color:#666;text-decoration:underline;">TMDB</a>.
</p>
"""
    return textwrap.dedent(html_out).strip()




# ===============================
# Î©îÏù∏ Ïã§Ìñâ
# ===============================
def main_once():
    ws = get_sheet()
    service = get_blogger_service()
    rows = ws.get_all_values()
    target_row, movie_id = None, None
    for idx, row in enumerate(rows[1:], start=2):
        done_val = row[7].strip() if len(row) > 7 else ""
        movie_raw = row[1].strip() if len(row) > 1 else ""
        if done_val == "ÏôÑ": continue
        if not movie_raw.isdigit(): continue
        target_row, movie_id = idx, int(movie_raw)
        break
    if not movie_id:
        print("üìå Ï≤òÎ¶¨Ìï† ÌñâÏù¥ ÏóÜÏäµÎãàÎã§.")
        return False

    post = tmdb_get(f"/movie/{movie_id}", params={"language": LANG, "append_to_response": "credits,images"}, api_key=API_KEY)
    title = post.get("title") or post.get("original_title") or f"movie_{movie_id}"
    year = (post.get("release_date") or "")[:4]
    if year:
        blog_title = f"{year} Filme {title} sinopse elenco trailer"
    else:
        blog_title = f"Filme {title} sinopse elenco trailer"
    html_out = build_html(post, cast_count=CAST_COUNT, stills_count=STILLS_COUNT)

    res = post_to_blogger(service, BLOG_ID, blog_title, html_out, labels=["Filme", year] if year else ["Filme"])
    print(f"‚úÖ Î∞úÌñâ ÏôÑÎ£å: {res.get('url','(URL ÎØ∏ÌôïÏù∏)')}")
    ws.update_cell(target_row, 8, "ÏôÑ")
    print(f"‚úÖ ÏôÑÎ£å ÌëúÏãú (Ìñâ {target_row}, HÏó¥)")
    return True

if __name__ == "__main__":
    for i in range(POST_COUNT):
        print(f"\nüöÄ {i+1}/{POST_COUNT} Î≤àÏß∏ Ìè¨Ïä§ÌåÖ ÏãúÏûë")
        ok = main_once()
        if not ok: break
        if i < POST_COUNT-1 and POST_DELAY_MIN>0:
            time.sleep(POST_DELAY_MIN*60)








