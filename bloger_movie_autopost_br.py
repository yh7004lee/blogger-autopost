#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
sys.stdout.reconfigure(encoding="utf-8")
"""
Excel(MOVIE_ID) ‚Üí TMDB ‚Üí Blogger ÏûêÎèôÌè¨Ïä§ÌåÖ ÌååÏù¥ÌîÑÎùºÏù∏ (Î∏åÎùºÏßà Ìè¨Î•¥Ìà¨Í∞àÏñ¥ Î≤ÑÏ†Ñ)
- movies_discover.xlsx ÏùΩÍ∏∞: A=Ï†úÎ™©, B=MOVIE_ID, C=Í∞úÎ¥âÏùº, D=ÌèâÏ†ê, E=Ìà¨ÌëúÏàò, F=ÎπÑÍ≥†, H=ÏôÑÎ£åÌëúÏãú
- HÏó¥Ïù¥ "ÏôÑ"Ïù∏ ÌñâÏùÄ Í±¥ÎÑàÎõ∞Í≥†, Ï≤´ Î≤àÏß∏ ÎØ∏ÏôÑÎ£å Ìñâ(BÏó¥Ïùò MOVIE_ID)Î°ú Ìè¨Ïä§ÌåÖ
- TMDB ÏÉÅÏÑ∏/Ï∂úÏó∞/Ïù¥ÎØ∏ÏßÄ/Î¶¨Î∑∞/Ï∂îÏ≤ú/ÏòàÍ≥†Ìé∏ ÏàòÏßë
- ÎûúÎç§ Ïù∏Ìä∏Î°ú(6Î¨∏Ïû•), ÏÑπÏÖò Î¶¨Îìú(4Î¨∏Ïû•), ÏïÑÏõÉÌä∏Î°ú(6Î¨∏Ïû•)
- Blogger APIÎ°ú Í≥µÍ∞ú (blogId=Î∏åÎùºÏßà Î∏îÎ°úÍ∑∏ ID)
- ÏÑ±Í≥µ Ïãú ÎåÄÏÉÅ Ìñâ HÏó¥Ïóê "ÏôÑ" Í∏∞Î°ù
"""

import json
import urllib.parse
import os, sys, html, textwrap, requests, random, time, pickle

from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

import gspread
from google.oauth2.service_account import Credentials

# ================================
# Google Sheets Ïù∏Ï¶ù
# ================================
def get_sheet():
    SERVICE_ACCOUNT_FILE = "sheetapi.json"
    SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

    creds = Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE, scopes=SCOPES
    )
    gc = gspread.authorize(creds)

    SHEET_ID = "10kqYhxmeewG_9-XOdXTbv0RVQG9_-jXjtg0C6ERoGG0"
    return gc.open_by_key(SHEET_ID).sheet1


# ===============================
# üìù Ìè¨Ïä§ÌåÖ ÏÑ§Ï†ï
POST_COUNT = 1     
POST_DELAY_MIN = 1  

# ===============================
# üîß ÌôòÍ≤Ω/Í≤ΩÎ°ú ÏÑ§Ï†ï
EXCEL_PATH = "movies_discover.xlsx"
BLOG_ID = "1140596789331555981"   # ‚òÖ Î∏åÎùºÏßàÏö© Î∏îÎ°úÍ∑∏ IDÎ°ú ÍµêÏ≤¥

# ===============================
# üà∂ TMDB ÏÑ§Ï†ï
LANG = "pt-BR"   # ‚òÖ Ìè¨Î•¥Ìà¨Í∞àÏñ¥ (Î∏åÎùºÏßà)
CAST_COUNT = 10
STILLS_COUNT = 8
TMDB_V3_BASE = "https://api.themoviedb.org/3"
IMG_BASE = "https://image.tmdb.org/t/p"

# üîë TMDB Ïù∏Ï¶ùÏ†ïÎ≥¥
BEARER = "YOUR_TMDB_BEARER"
API_KEY = "56f4a3bce0512cdc20171a83153c25d6"


# üîë YouTube API
YOUTUBE_API_KEY = "YOUR_YOUTUBE_KEY"
YOUTUBE_SEARCH_URL = "https://www.googleapis.com/youtube/v3/search"

# ===============================
# TMDB / YouTube API Ìï®ÏàòÎì§ (Í∏∞Ï°¥ ÎèôÏùº, langÎßå pt-BRÎ°ú)
# ===============================
def tmdb_get(path, params=None, bearer=None, api_key=None):
    url = f"{TMDB_V3_BASE}{path}"
    headers = {"Accept": "application/json"}
    if bearer:
        headers["Authorization"] = f"Bearer {bearer}"
    if params is None:
        params = {}
    if api_key and "api_key" not in params and not bearer:
        params["api_key"] = api_key
    r = requests.get(url, headers=headers, params=params, timeout=20)
    r.raise_for_status()
    return r.json()

def img_url(path, size="w780"):
    if not path:
        return None
    return f"{IMG_BASE}/{size}{path}"

def choose(*options):
    return random.choice(options)

# ===============================
# üé¨ Ïù∏Ìä∏Î°ú ÏÉùÏÑ± (Ìè¨Î•¥Ìà¨Í∞àÏñ¥)
# ===============================
def make_intro_6(title, year, genres_str, director_names, main_cast, cert_label, runtime_min, keywords):
    year_txt = f"lan√ßado em {year}" if year else "ano de lan√ßamento desconhecido"
    genre_phrase = genres_str if genres_str else "g√™nero desconhecido"
    director_one = director_names[0] if director_names else ""
    star_one = main_cast[0] if main_cast else ""
    star_two = main_cast[1] if len(main_cast) > 1 else ""
    runtime_txt = f"{runtime_min} minutos" if runtime_min else "dura√ß√£o desconhecida"
    cert_txt = cert_label or "classifica√ß√£o desconhecida"

    # 1. Abertura
    s1 = choose(
        f"Ol√°, cin√©filos! Hoje vamos mergulhar no universo do filme <b>{title}</b>, {year_txt}, uma obra que merece toda a sua aten√ß√£o.",
        f"Se voc√™ √© apaixonado por cinema, vai gostar de conhecer mais sobre <b>{title}</b>, {year_txt}, um t√≠tulo que j√° conquistou muitos cora√ß√µes.",
        f"Bem-vindo! Hoje o destaque √© para <b>{title}</b>, {year_txt}, um longa que desperta emo√ß√µes intensas e discuss√µes interessantes.",
        f"O cinema nos brinda com v√°rias obras inesquec√≠veis, e <b>{title}</b>, {year_txt}, √© certamente uma delas que vamos explorar juntos."
    )

    # 2. G√™nero
    s2 = choose(
        f"Este √© um filme de {genre_phrase}, que combina emo√ß√£o e profundidade de maneira envolvente.",
        f"Pertencente ao g√™nero {genre_phrase}, a produ√ß√£o consegue transmitir sentimentos fortes e momentos inesquec√≠veis.",
        f"Com caracter√≠sticas marcantes de {genre_phrase}, o longa prende a aten√ß√£o do in√≠cio ao fim.",
        f"Envolvendo-se no g√™nero {genre_phrase}, a trama se desenrola de forma cativante e instigante."
    )

    # 3. Dire√ß√£o
    s3 = (
        choose(
            f"A dire√ß√£o √© assinada por {director_one}, que imprime um estilo √∫nico e deixa sua marca em cada cena.",
            f"Com {director_one} no comando, a obra se transforma em uma experi√™ncia visual e narrativa inesquec√≠vel.",
            f"{director_one} conduz a hist√≥ria com sensibilidade e firmeza, criando momentos de grande impacto.",
            f"O olhar criativo de {director_one} faz deste filme algo muito especial e memor√°vel."
        ) if director_one else choose(
            "A dire√ß√£o √© equilibrada, com escolhas criativas que mant√™m o p√∫blico imerso.",
            "Mesmo sem grandes exageros, a condu√ß√£o da trama √© precisa e muito bem realizada.",
            "A narrativa se beneficia de uma dire√ß√£o clara e consistente, que d√° fluidez ao enredo.",
            "A maneira como a hist√≥ria √© conduzida garante ritmo e emo√ß√£o do come√ßo ao fim."
        )
    )

    # 4. Elenco
    s4 = (
        choose(
            f"O elenco brilha com nomes como {star_one}{' e ' + star_two if star_two else ''}, entregando atua√ß√µes memor√°veis.",
            f"Entre os destaques do elenco est√° {star_one}, cuja performance √© digna de aplausos.",
            f"As atua√ß√µes s√£o s√≥lidas e cheias de emo√ß√£o, com {star_one} marcando presen√ßa em momentos-chave.",
            f"Al√©m de um elenco diversificado, {star_one} se destaca pela entrega em seu papel."
        ) if star_one else choose(
            "O elenco √© diversificado e cheio de talentos que enriquecem a narrativa.",
            "Cada integrante do elenco contribui com sua presen√ßa marcante.",
            "Os atores entregam interpreta√ß√µes que refor√ßam a intensidade da hist√≥ria.",
            "O conjunto de atores d√° vida a personagens cativantes e bem constru√≠dos."
        )
    )

    # 5. Dura√ß√£o e classifica√ß√£o
    s5 = choose(
        f"O filme tem dura√ß√£o de {runtime_txt}, o que torna a experi√™ncia equilibrada e envolvente.",
        f"Com seus {runtime_txt}, a narrativa consegue manter o ritmo sem se tornar cansativa.",
        f"A dura√ß√£o de {runtime_txt} √© ideal para aproveitar cada detalhe da hist√≥ria."
    ) + " " + choose(
        f"A classifica√ß√£o indicativa √© {cert_txt}, tornando-o acess√≠vel para diferentes p√∫blicos.",
        f"Classificado como {cert_txt}, o longa pode ser apreciado por v√°rias faixas et√°rias.",
        f"A censura √© {cert_txt}, o que ajuda o espectador a decidir a melhor ocasi√£o para assistir."
    )

    # 6. Impacto cultural ou expectativa
    s6 = choose(
        f"<b>{title}</b> despertou debates e gerou expectativas desde seu lan√ßamento, mostrando sua for√ßa cultural.",
        f"Desde sua estreia, <b>{title}</b> chamou a aten√ß√£o por sua proposta ousada e qualidade t√©cnica.",
        f"O impacto de <b>{title}</b> foi imediato, consolidando-o como um dos grandes destaques do {year_txt}.",
        f"N√£o √© apenas um filme, <b>{title}</b> √© uma experi√™ncia que permanece viva na mem√≥ria de quem assiste."
    )

    # 7. Encerramento da introdu√ß√£o
    s7 = choose(
        f"Agora, vamos explorar juntos os principais destaques de <b>{title}</b> e entender por que ele merece um lugar especial na sua lista de filmes.",
        f"Nas pr√≥ximas linhas, voc√™ vai conhecer mais sobre a sinopse, o elenco, os bastidores e os pontos fortes de <b>{title}</b>.",
        f"Prepare-se para mergulhar no universo de <b>{title}</b>, analisando detalhes que o tornam uma produ√ß√£o t√£o relevante.",
        f"Vamos seguir adiante e descobrir o que faz de <b>{title}</b> uma obra t√£o comentada e aclamada."
    )

    return " ".join([s1, s2, s3, s4, s5, s6, s7])


# ===============================
# üé¨ ÏïÑÏõÉÌä∏Î°ú ÏÉùÏÑ± (Ìè¨Î•¥Ìà¨Í∞àÏñ¥)
# ===============================

def make_outro_6(title, year, genres_str, director_names, keywords):
    year_txt = year if year else "desconhecido"
    director_one = director_names[0] if director_names else ""

    # 1. Encerramento inicial
    s1 = choose(
        f"Chegamos ao fim desta an√°lise sobre o filme <b>{title}</b> ({year_txt}), que trouxe tantos pontos interessantes para refletirmos.",
        f"Encerramos aqui a apresenta√ß√£o de <b>{title}</b> ({year_txt}), uma obra que certamente merece estar no radar de qualquer amante do cinema.",
        f"Terminamos esta jornada pelo universo de <b>{title}</b> ({year_txt}), destacando os aspectos que o tornam uma produ√ß√£o t√£o comentada.",
        f"Este foi um mergulho no mundo de <b>{title}</b> ({year_txt}), explorando os elementos que fazem deste filme algo memor√°vel."
    )

    # 2. Resumo do que foi abordado
    s2 = choose(
        "Ao longo do artigo, revisitamos a sinopse, comentamos sobre o elenco e detalhamos os principais aspectos t√©cnicos e art√≠sticos.",
        "Nesta an√°lise, percorremos a hist√≥ria, falamos dos atores e apontamos os pontos altos que tornam o filme envolvente.",
        "Passamos pela trama, pela dire√ß√£o e pelo impacto cultural que este t√≠tulo trouxe para os espectadores.",
        "Relembramos a narrativa, a ambienta√ß√£o e os personagens que fazem de <b>{title}</b> uma experi√™ncia especial."
    )

    # 3. Reflex√£o sobre a dire√ß√£o
    s3 = (
        choose(
            f"A condu√ß√£o de {director_one} foi um dos pontos mais fortes, mostrando criatividade e sensibilidade em cada cena.",
            f"{director_one} conseguiu imprimir sua marca pessoal no filme, equilibrando emo√ß√£o e t√©cnica de maneira √∫nica.",
            f"O olhar art√≠stico de {director_one} deixou claro como a dire√ß√£o pode transformar uma hist√≥ria em algo grandioso.",
            f"N√£o podemos deixar de destacar a vis√£o de {director_one}, que fez deste trabalho uma obra marcante."
        ) if director_one else choose(
            "A dire√ß√£o em geral mostrou equil√≠brio e clareza, garantindo ritmo e impacto narrativo at√© o fim.",
            "Mesmo sem um nome amplamente conhecido na dire√ß√£o, a condu√ß√£o foi s√≥lida e bem estruturada.",
            "A forma como o enredo foi dirigido manteve o p√∫blico conectado e interessado at√© os √∫ltimos momentos.",
            "A dire√ß√£o mostrou maturidade e dom√≠nio t√©cnico, elevando a qualidade da obra."
        )
    )

    # 4. Reflex√£o sobre avalia√ß√£o e experi√™ncia pessoal
    s4 = choose(
        "As avalia√ß√µes e notas s√£o apenas guias, mas a verdadeira experi√™ncia vem de assistir e sentir cada cena por conta pr√≥pria.",
        "Os n√∫meros e cr√≠ticas importam, mas nada substitui a emo√ß√£o pessoal de se conectar com a narrativa.",
        "Vale lembrar que opini√µes variam, e o melhor √© sempre tirar suas pr√≥prias conclus√µes ao assistir.",
        "A nota √© apenas uma refer√™ncia: o impacto real depende do olhar de cada espectador."
    )

    # 5. Recomenda√ß√£o de filmes relacionados
    s5 = choose(
        "Ao final, tamb√©m deixamos recomenda√ß√µes de filmes relacionados que podem enriquecer ainda mais sua jornada cinematogr√°fica.",
        "Para quem gostou desta experi√™ncia, indicamos t√≠tulos semelhantes que ampliam o repert√≥rio e trazem novas descobertas.",
        "Sugerimos ainda obras que dialogam com este filme, permitindo compara√ß√µes interessantes e novas perspectivas.",
        "Para continuar no clima, oferecemos algumas op√ß√µes de filmes que seguem a mesma linha tem√°tica."
    )

    # 6. Palavras-chave e import√¢ncia
    s6 = choose(
        f"Entre os principais pontos, destacamos palavras-chave como {', '.join(keywords[:6])}, que ajudam a compreender melhor o alcance da obra.",
        f"As palavras-chave {', '.join(keywords[:6])} sintetizam os elementos centrais do filme e podem servir de guia para novas buscas.",
        f"Destacamos termos como {', '.join(keywords[:6])}, que refor√ßam a import√¢ncia desta produ√ß√£o dentro de seu g√™nero.",
        f"Os conceitos de {', '.join(keywords[:6])} foram recorrentes e mostram como o filme se posiciona dentro do cen√°rio cinematogr√°fico."
    )

    # 7. Despedida final
    s7 = choose(
        "Muito obrigado por ter acompanhado at√© aqui, espero que este conte√∫do tenha inspirado sua pr√≥xima sess√£o de cinema. üôÇ",
        "Agradecemos por sua leitura e desejamos que aproveite ainda mais suas experi√™ncias cinematogr√°ficas, at√© a pr√≥xima!",
        "Se gostou do artigo, compartilhe com amigos e continue acompanhando nossas pr√≥ximas an√°lises de grandes filmes.",
        "Foi um prazer trazer esta an√°lise para voc√™, e em breve voltaremos com novos t√≠tulos e recomenda√ß√µes especiais."
    )

    return " ".join([s1, s2, s3, s4, s5, s6, s7])


# ===============================
# Blogger Ïù∏Ï¶ù
# ===============================
import google.oauth2.credentials
CLIENT_SECRET_FILE = r"cc.json"
BLOGGER_TOKEN_JSON = "blogger_token.json"
SCOPES = ["https://www.googleapis.com/auth/blogger"]

def get_blogger_service():
    with open(BLOGGER_TOKEN_JSON, "r", encoding="utf-8") as f:
        token_data = json.load(f)
    creds = google.oauth2.credentials.Credentials.from_authorized_user_info(token_data, SCOPES)
    return build("blogger", "v3", credentials=creds)

# ===============================
# Excel Ìó¨Ìçº
# ===============================
DONE_COL = 8       # HÏó¥
DONE_MARK = "ÏôÑ"   

def find_next_row(ws):
    rows = ws.get_all_values()
    for idx, row in enumerate(rows[1:], start=2):
        done_val = row[7].strip() if len(row) > 7 else ""   # HÏó¥
        movie_raw = row[1].strip() if len(row) > 1 else ""
        if done_val == DONE_MARK:
            continue
        if not movie_raw.isdigit():
            continue
        return idx, int(movie_raw)
    return None, None

def mark_done(ws, row_idx):
    ws.update_cell(row_idx, DONE_COL, DONE_MARK)

# ===============================
# Blogger Ìè¨Ïä§Ìä∏
# ===============================
def post_to_blogger(service, blog_id, title, html_content, labels=None, is_draft=False):
    body = {"kind": "blogger#post", "title": title, "content": html_content}
    if labels:
        body["labels"] = labels
    post = service.posts().insert(blogId=blog_id, body=body, isDraft=is_draft).execute()
    return post

# ===============================
# Î©îÏù∏ Ïã§Ìñâ
# ===============================
def main_once():
    ws = get_sheet()
    service = get_blogger_service()

    target_row, movie_id = find_next_row(ws)
    if not movie_id:
        print("üìå Ï≤òÎ¶¨Ìï† ÌñâÏù¥ ÏóÜÏäµÎãàÎã§. (Î™®Îì† ÌñâÏù¥ 'ÏôÑ')")
        return False

    print(f"üëâ ÎåÄÏÉÅ Ìñâ: {target_row} (MOVIE_ID={movie_id})")

    post = tmdb_get(f"/movie/{movie_id}", params={"language": LANG, "append_to_response": "credits,images"}, bearer=None, api_key=API_KEY)

    title = post.get("title") or post.get("original_title") or f"movie_{movie_id}"
    year = (post.get("release_date") or "")[:4]
    blog_title = f"Filme {title} ({year}) sinopse elenco trailer"

    html_out = f"<p>{make_intro_6(title, year, '', [], [], '', 0, [title])}</p><br><p>{make_outro_6(title, year, '', [], [title])}</p>"

    res = post_to_blogger(service, BLOG_ID, blog_title, html_out, labels=["Filme", year] if year else ["Filme"])
    print(f"‚úÖ Î∞úÌñâ ÏôÑÎ£å: {res.get('url', '(URL ÎØ∏ÌôïÏù∏)')}")

    mark_done(ws, target_row)
    print(f"‚úÖ Google Sheets ÏôÑÎ£å ÌëúÏãú (Ìñâ {target_row}, HÏó¥)")

    return True

if __name__ == "__main__":
    for i in range(POST_COUNT):
        print(f"\nüöÄ {i+1}/{POST_COUNT} Î≤àÏß∏ Ìè¨Ïä§ÌåÖ ÏãúÏûë")
        ok = main_once()
        if not ok:
            print("üìå Îçî Ïù¥ÏÉÅ Ï≤òÎ¶¨Ìï† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥ Ï¢ÖÎ£åÌï©ÎãàÎã§.")
            break
        if i < POST_COUNT - 1 and POST_DELAY_MIN > 0:
            time.sleep(POST_DELAY_MIN * 60)



